<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>26英文字母</title>
  
  <subtitle>欢迎来到我的博客</subtitle>
  <link href="https://26ywzm.icu:4000/atom.xml" rel="self"/>
  
  <link href="https://26ywzm.icu:4000/"/>
  <updated>2024-06-09T16:38:46.974Z</updated>
  <id>https://26ywzm.icu:4000/</id>
  
  <author>
    <name>26英文字母</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>eNSP配置OSPF协议</title>
    <link href="https://26ywzm.icu:4000/posts/3401392151/"/>
    <id>https://26ywzm.icu:4000/posts/3401392151/</id>
    <published>2024-06-08T16:00:00.000Z</published>
    <updated>2024-06-09T16:38:46.974Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OSPF动态路由协议"><a href="#OSPF动态路由协议" class="headerlink" title="OSPF动态路由协议"></a>OSPF动态路由协议</h1><h3 id="OSPF协议"><a href="#OSPF协议" class="headerlink" title="OSPF协议"></a>OSPF协议</h3><p>开放式最短路径优先协议OSPF(Open Shortest Path Fisrt)是IETF定义的一种基于链路状态（包括带宽和距离）的内部网关路由协议，是现阶段常用的路由协议，OSPF默认优先级是10。而动态路由RIP是一种基于距离矢量算法的路由协议，RIP的优先级是100，存在着收敛慢、易产生路由环路、可扩展性差等问题，目前已逐渐被OSPF取代。</p><h3 id="OSPF的工作原理"><a href="#OSPF的工作原理" class="headerlink" title="OSPF的工作原理"></a>OSPF的工作原理</h3><p>每个路由器回周期性的向相邻路由器发送探测报文（Hello 报文），检测其是否可达。如果邻站给予应答，说明链路正常；否则说明链路出现故障。如果一个路由器检测到某条链路状态协议发生变化，该路由器就发送链路状态更新报文，采用泛洪操作对全网更新链路状态。即使链路状态没有发生变化，每隔 30min 路由器要向网络中的其他路由器广播链路状态信息，以保证链路状态数据库和全网保持一致。每个路由器收到其他路由器的链路状态信息后，更新链路状态数据库，构建整个网络的拓扑图，利用 Dijkstra 的最短路径算法计算出到达每个网络的最短路径（就是路由表中的内容）。</p><h3 id="OSPF区域规划"><a href="#OSPF区域规划" class="headerlink" title="OSPF区域规划"></a>OSPF区域规划</h3><p>Area 0 是骨干区域、核心区域，Area 1、2 等是常规区域，其他常规区域都必须与此相连。<br>OSPF区域：每个区域都维护一个独立的链路装填数据LSDB（Link State Database）。<br>区域边界路由器ABR（Area Border Router）:既连接骨干区域，也连接常规区域。</p><h3 id="OSPF的优势："><a href="#OSPF的优势：" class="headerlink" title="OSPF的优势："></a>OSPF的优势：</h3><ol><li><p>无环路，OSPF是基于链路状态算法的，链路状态算法本身就是没有环路。</p></li><li><p>收敛快，理论上可以实现纳秒级收敛，只不过设备性能无法支持纳秒级，最多能形成毫秒级收敛。</p></li><li><p>扩展性好</p></li><li><p>支持认证，两台路由器之间配置了认证后，如果认证通过才会交互路由信息，如果不通过不交互。不过我们这个实验不做这个认证，大家了解一下就行。</p></li></ol><h2 id="配置过程及讲解"><a href="#配置过程及讲解" class="headerlink" title="配置过程及讲解"></a>配置过程及讲解</h2><p>配置R1的OSPF协议<br>[R1]ospf 1 #配置OSPF进程号<br>[R1-ospf-1]area 0 #设置为主干区域0<br>[R1-ospf-1-area-0.0.0.0]network [ip网段] [反子网掩码]  #（宣告网段）告诉所有相连接的路由器，本路由器下有几个网段<br>反子网掩码：顾名思义就是和平时写的子网掩码相反,平时255时反码就是0 平时0时反码就是255（0表示精确匹配，1表示任意匹配。）</p><blockquote><p>提示：在平时配置中要使用OSPF应当在拓扑中所有路由器上配置OSPF协议，使它们通信。</p></blockquote><h2 id="查看OSPF邻接表"><a href="#查看OSPF邻接表" class="headerlink" title="查看OSPF邻接表"></a>查看OSPF邻接表</h2><p>display ospf peer brief #显示OSPF邻居表</p><h2 id="OSPF额外补充"><a href="#OSPF额外补充" class="headerlink" title="OSPF额外补充"></a>OSPF额外补充</h2><p>OSPF常见的五种报文:DBD、LSR、LSU、LSack和Hello报文。</p><ol><li>Hello报文（Hello Packet）：</li></ol><ul><li>目的：用于在OSPF路由器之间建立和维护邻居关系。Hello报文帮助路由器发现和保持邻居，确保它们在同一个子网中。</li><li>特点：定期发送，包含诸如路由器ID、Hello间隔时间、邻居列表等信息。</li></ul><ol start="2"><li>数据库描述报文（DBD Packet，也称为DD报文）：</li></ol><ul><li>目的：用于在邻居之间交换LSA（链路状态广告）摘要，帮助路由器了解邻居路由器的链路状态数据库。</li><li>特点：包含LSA的简要信息（如LSA头部），以便双方比较和同步它们的数据库。</li></ul><ol start="3"><li>链路状态请求报文（LSR Packet）：</li></ol><ul><li>目的：用于请求特定的LSA详细信息。如果一个路由器发现邻居有它自己没有的LSA，它会发送LSR请求这些LSA。</li><li>特点：包含请求的LSA的类型、ID等信息。</li></ul><ol start="4"><li>链路状态更新报文（LSU Packet）：</li></ol><ul><li>目的：用于发送详细的LSA信息。响应LSR报文，或者在链路状态发生变化时，路由器会发送LSU报文来更新邻居的链路状态数据库。</li><li>特点：包含一个或多个LSA的完整信息。</li></ul><ol start="5"><li>链路状态确认报文（LSAck Packet）：</li></ol><ul><li>目的：用于确认收到的LSA。为了确保可靠传输，每个LSA都需要确认。LSAck报文用于确认收到的LSA，防止信息丢失。</li><li>特点：包含被确认的LSA的头部信息。</li></ul>]]></content>
    
    
    <summary type="html">如何在华为eNSP中配置OSPF动态路由协议.</summary>
    
    
    
    <category term="网络技术" scheme="https://26ywzm.icu:4000/category/%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="OSPF技术" scheme="https://26ywzm.icu:4000/tag/OSPF%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>WireGuard配置Ubuntu教程</title>
    <link href="https://26ywzm.icu:4000/posts/1297332112/"/>
    <id>https://26ywzm.icu:4000/posts/1297332112/</id>
    <published>2024-04-23T16:00:00.000Z</published>
    <updated>2024-06-09T15:51:32.562Z</updated>
    
    <content type="html"><![CDATA[<p> <strong>wireguard是什么？</strong><a href="https://en.wikipedia.org/wiki/WireGuard">维基百科</a>是这样描述的：</p><p><strong>WireGuard</strong>是一种实现<a href="https://en.wikipedia.org/wiki/Virtual_private_network">加密虚拟专用网络(VPN) 的通信协议</a>和免费开源软件，其设计目标是：易于使用、高速性能、低攻击面</p><p> 它旨在比<a href="https://en.wikipedia.org/wiki/IPsec">IPsec</a>和<a href="https://en.wikipedia.org/wiki/OpenVPN">OpenVPN</a>这两种常见的隧道协议具有更好的性能和更强大的功能；<br> <strong>WireGuard</strong> 协议通过<a href="https://en.wikipedia.org/wiki/User_Datagram_Protocol">UDP</a>传递流量。</p><p>通过描述，我们知道了wireguard其实就是<strong>一个FAST（速度快）、MODERN（流行）、SECURE （安全）的VPN TUNNEL（VPN隧道）</strong>。</p><h2 id="Ubuntu版本配置"><a href="#Ubuntu版本配置" class="headerlink" title="Ubuntu版本配置"></a>Ubuntu版本配置</h2><h3 id="安装Wireguard（以ubuntu20-04为基础）"><a href="#安装Wireguard（以ubuntu20-04为基础）" class="headerlink" title="安装Wireguard（以ubuntu20.04为基础）"></a><strong>安装Wireguard（以ubuntu20.04为基础）</strong></h3><pre><code>#root权限sudo -i#安装wireguard软件apt install wireguard resolvconf -y#开启IP转发echo &quot;net.ipv4.ip_forward = 1&quot; &gt;&gt; /etc/sysctl.confsysctl -p        </code></pre><h3 id="进入配置存储路径，调整目录权限"><a href="#进入配置存储路径，调整目录权限" class="headerlink" title="进入配置存储路径，调整目录权限"></a><strong>进入配置存储路径，调整目录权限</strong></h3><pre><code>cd /etc/wireguard/chmod 0777 /etc/wireguard#调整目录默认权限umask 077</code></pre><h3 id="生成服务器秘钥"><a href="#生成服务器秘钥" class="headerlink" title="生成服务器秘钥"></a><strong>生成服务器秘钥</strong></h3><pre><code>#生成私钥wg genkey &gt; server.key#通过私钥生成公钥wg pubkey &lt; server.key &gt; server.key.pub</code></pre><h3 id="生成客户端-client1-秘钥"><a href="#生成客户端-client1-秘钥" class="headerlink" title="生成客户端(client1)秘钥"></a><strong>生成客户端(client1)秘钥</strong></h3><pre><code>#生成私钥wg genkey &gt; client1.key#通过私钥生成公钥wg pubkey &lt; client1.key &gt; client1.key.pub</code></pre><h3 id="显示所有生成的秘钥"><a href="#显示所有生成的秘钥" class="headerlink" title="显示所有生成的秘钥"></a><strong>显示所有生成的秘钥</strong></h3><pre><code>cat server.key &amp;&amp; cat server.key.pub &amp;&amp; cat client1.key &amp;&amp; cat client1.key.pub</code></pre><h3 id="自动创建服务器配置文件"><a href="#自动创建服务器配置文件" class="headerlink" title="自动创建服务器配置文件"></a><strong>自动创建服务器配置文件</strong></h3><pre><code>echo &quot;[Interface]PrivateKey = $(cat server.key) # 填写本机的privatekey 内容Address = 10.0.8.1 #本机虚拟局域网IPPostUp   = iptables -A FORWARD -i wg0 -j ACCEPT; iptables -A FORWARD -o wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADEPostDown = iptables -D FORWARD -i wg0 -j ACCEPT; iptables -D FORWARD -o wg0 -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE#注意eth0需要为本机网卡名称ListenPort = 50814 # 监听端口DNS = 8.8.8.8MTU = 1420[Peer]PublicKey =  $(cat client1.key.pub)  #自动client1的公钥AllowedIPs = 10.0.8.10/32 #客户端所使用的IP&quot; &gt; wg0.conf</code></pre><h3 id="设置服务器开机自启动"><a href="#设置服务器开机自启动" class="headerlink" title="设置服务器开机自启动"></a><strong>设置服务器开机自启动</strong></h3><pre><code>systemctl enable wg-quick@wg0</code></pre><h3 id="启动wireguard"><a href="#启动wireguard" class="headerlink" title="启动wireguard"></a><strong>启动wireguard</strong></h3><pre><code>#启动wg0wg-quick up wg0#关闭wg0wg-quick down wg0</code></pre><h3 id="手动进入创建服务器配置文件"><a href="#手动进入创建服务器配置文件" class="headerlink" title="手动进入创建服务器配置文件"></a><strong>手动进入创建服务器配置文件</strong></h3><pre><code>nano /etc/wireguard/wg0.conf</code></pre><h3 id="wireguard客户端下载地址"><a href="#wireguard客户端下载地址" class="headerlink" title="wireguard客户端下载地址"></a><strong>wireguard客户端下载地址</strong></h3><pre><code>https://www.wireguard.com/install/</code></pre><h3 id="客户端配置（以client1为例）"><a href="#客户端配置（以client1为例）" class="headerlink" title="客户端配置（以client1为例）"></a><strong>客户端配置（以client1为例）</strong></h3><pre><code>[Interface]PrivateKey = 6M8HEZioew+vR3i53sPc64Vg40YsuMzh4vI1Lkc88Xo= #此处为client1的私钥Address = 10.0.8.10 #此处为peer规定的客户端IPMTU = 1500[Peer]PublicKey = Tt5WEa0Vycf4F+TTjR2TAHDfa2onhh+tY8YOIT3cKjI= #此处为server的公钥AllowedIPs = 10.0.8.0/24 #此处为允许的服务器IPEndpoint = 114.132.56.178:50814 #服务器对端IP+端口</code></pre><h3 id="增加服务器客户端节点client2"><a href="#增加服务器客户端节点client2" class="headerlink" title="增加服务器客户端节点client2"></a><strong>增加服务器客户端节点client2</strong></h3><pre><code>#生成私钥wg genkey &gt; client2.key#通过私钥生成公钥wg pubkey &lt; client2.key &gt; client2.key.pub#将peer公钥加入wg0.conf配置echo &quot;[Peer]PublicKey =  $(cat client2.key.pub)  #自动client1的公钥AllowedIPs = 10.0.8.11/32 #客户端Client2所使用的IP&quot; &gt;&gt; wg0.conf</code></pre>]]></content>
    
    
    <summary type="html">WireGuard(Ubuntu版本)组网教程.</summary>
    
    
    
    <category term="网络技术" scheme="https://26ywzm.icu:4000/category/%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="WireGuard" scheme="https://26ywzm.icu:4000/tag/WireGuard/"/>
    
  </entry>
  
</feed>
